// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: paychex/paychex/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89bd21c5ead58169, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89bd21c5ead58169, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetEmployeeRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetEmployeeRequest) Reset()         { *m = QueryGetEmployeeRequest{} }
func (m *QueryGetEmployeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEmployeeRequest) ProtoMessage()    {}
func (*QueryGetEmployeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89bd21c5ead58169, []int{2}
}
func (m *QueryGetEmployeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEmployeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEmployeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEmployeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEmployeeRequest.Merge(m, src)
}
func (m *QueryGetEmployeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEmployeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEmployeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEmployeeRequest proto.InternalMessageInfo

func (m *QueryGetEmployeeRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetEmployeeResponse struct {
	Employee Employee `protobuf:"bytes,1,opt,name=Employee,proto3" json:"Employee"`
}

func (m *QueryGetEmployeeResponse) Reset()         { *m = QueryGetEmployeeResponse{} }
func (m *QueryGetEmployeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEmployeeResponse) ProtoMessage()    {}
func (*QueryGetEmployeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89bd21c5ead58169, []int{3}
}
func (m *QueryGetEmployeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEmployeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEmployeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEmployeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEmployeeResponse.Merge(m, src)
}
func (m *QueryGetEmployeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEmployeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEmployeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEmployeeResponse proto.InternalMessageInfo

func (m *QueryGetEmployeeResponse) GetEmployee() Employee {
	if m != nil {
		return m.Employee
	}
	return Employee{}
}

type QueryAllEmployeeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEmployeeRequest) Reset()         { *m = QueryAllEmployeeRequest{} }
func (m *QueryAllEmployeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEmployeeRequest) ProtoMessage()    {}
func (*QueryAllEmployeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89bd21c5ead58169, []int{4}
}
func (m *QueryAllEmployeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEmployeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEmployeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEmployeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEmployeeRequest.Merge(m, src)
}
func (m *QueryAllEmployeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEmployeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEmployeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEmployeeRequest proto.InternalMessageInfo

func (m *QueryAllEmployeeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEmployeeResponse struct {
	Employee   []Employee          `protobuf:"bytes,1,rep,name=Employee,proto3" json:"Employee"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEmployeeResponse) Reset()         { *m = QueryAllEmployeeResponse{} }
func (m *QueryAllEmployeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEmployeeResponse) ProtoMessage()    {}
func (*QueryAllEmployeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89bd21c5ead58169, []int{5}
}
func (m *QueryAllEmployeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEmployeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEmployeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEmployeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEmployeeResponse.Merge(m, src)
}
func (m *QueryAllEmployeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEmployeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEmployeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEmployeeResponse proto.InternalMessageInfo

func (m *QueryAllEmployeeResponse) GetEmployee() []Employee {
	if m != nil {
		return m.Employee
	}
	return nil
}

func (m *QueryAllEmployeeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetQueryResponseRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetQueryResponseRequest) Reset()         { *m = QueryGetQueryResponseRequest{} }
func (m *QueryGetQueryResponseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetQueryResponseRequest) ProtoMessage()    {}
func (*QueryGetQueryResponseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89bd21c5ead58169, []int{6}
}
func (m *QueryGetQueryResponseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetQueryResponseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetQueryResponseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetQueryResponseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetQueryResponseRequest.Merge(m, src)
}
func (m *QueryGetQueryResponseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetQueryResponseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetQueryResponseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetQueryResponseRequest proto.InternalMessageInfo

func (m *QueryGetQueryResponseRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetQueryResponseResponse struct {
	QueryResponse QueryResponse `protobuf:"bytes,1,opt,name=QueryResponse,proto3" json:"QueryResponse"`
}

func (m *QueryGetQueryResponseResponse) Reset()         { *m = QueryGetQueryResponseResponse{} }
func (m *QueryGetQueryResponseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetQueryResponseResponse) ProtoMessage()    {}
func (*QueryGetQueryResponseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89bd21c5ead58169, []int{7}
}
func (m *QueryGetQueryResponseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetQueryResponseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetQueryResponseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetQueryResponseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetQueryResponseResponse.Merge(m, src)
}
func (m *QueryGetQueryResponseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetQueryResponseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetQueryResponseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetQueryResponseResponse proto.InternalMessageInfo

func (m *QueryGetQueryResponseResponse) GetQueryResponse() QueryResponse {
	if m != nil {
		return m.QueryResponse
	}
	return QueryResponse{}
}

type QueryAllQueryResponseRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllQueryResponseRequest) Reset()         { *m = QueryAllQueryResponseRequest{} }
func (m *QueryAllQueryResponseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllQueryResponseRequest) ProtoMessage()    {}
func (*QueryAllQueryResponseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89bd21c5ead58169, []int{8}
}
func (m *QueryAllQueryResponseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllQueryResponseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllQueryResponseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllQueryResponseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllQueryResponseRequest.Merge(m, src)
}
func (m *QueryAllQueryResponseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllQueryResponseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllQueryResponseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllQueryResponseRequest proto.InternalMessageInfo

func (m *QueryAllQueryResponseRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllQueryResponseResponse struct {
	QueryResponse []QueryResponse     `protobuf:"bytes,1,rep,name=QueryResponse,proto3" json:"QueryResponse"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllQueryResponseResponse) Reset()         { *m = QueryAllQueryResponseResponse{} }
func (m *QueryAllQueryResponseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllQueryResponseResponse) ProtoMessage()    {}
func (*QueryAllQueryResponseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89bd21c5ead58169, []int{9}
}
func (m *QueryAllQueryResponseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllQueryResponseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllQueryResponseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllQueryResponseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllQueryResponseResponse.Merge(m, src)
}
func (m *QueryAllQueryResponseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllQueryResponseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllQueryResponseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllQueryResponseResponse proto.InternalMessageInfo

func (m *QueryAllQueryResponseResponse) GetQueryResponse() []QueryResponse {
	if m != nil {
		return m.QueryResponse
	}
	return nil
}

func (m *QueryAllQueryResponseResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryCheckStaffRequest struct {
}

func (m *QueryCheckStaffRequest) Reset()         { *m = QueryCheckStaffRequest{} }
func (m *QueryCheckStaffRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckStaffRequest) ProtoMessage()    {}
func (*QueryCheckStaffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89bd21c5ead58169, []int{10}
}
func (m *QueryCheckStaffRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckStaffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckStaffRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckStaffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckStaffRequest.Merge(m, src)
}
func (m *QueryCheckStaffRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckStaffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckStaffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckStaffRequest proto.InternalMessageInfo

type QueryCheckStaffResponse struct {
	QueryResponse string `protobuf:"bytes,1,opt,name=queryResponse,proto3" json:"queryResponse,omitempty"`
}

func (m *QueryCheckStaffResponse) Reset()         { *m = QueryCheckStaffResponse{} }
func (m *QueryCheckStaffResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckStaffResponse) ProtoMessage()    {}
func (*QueryCheckStaffResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89bd21c5ead58169, []int{11}
}
func (m *QueryCheckStaffResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckStaffResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckStaffResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckStaffResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckStaffResponse.Merge(m, src)
}
func (m *QueryCheckStaffResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckStaffResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckStaffResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckStaffResponse proto.InternalMessageInfo

func (m *QueryCheckStaffResponse) GetQueryResponse() string {
	if m != nil {
		return m.QueryResponse
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "paychex.paychex.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "paychex.paychex.QueryParamsResponse")
	proto.RegisterType((*QueryGetEmployeeRequest)(nil), "paychex.paychex.QueryGetEmployeeRequest")
	proto.RegisterType((*QueryGetEmployeeResponse)(nil), "paychex.paychex.QueryGetEmployeeResponse")
	proto.RegisterType((*QueryAllEmployeeRequest)(nil), "paychex.paychex.QueryAllEmployeeRequest")
	proto.RegisterType((*QueryAllEmployeeResponse)(nil), "paychex.paychex.QueryAllEmployeeResponse")
	proto.RegisterType((*QueryGetQueryResponseRequest)(nil), "paychex.paychex.QueryGetQueryResponseRequest")
	proto.RegisterType((*QueryGetQueryResponseResponse)(nil), "paychex.paychex.QueryGetQueryResponseResponse")
	proto.RegisterType((*QueryAllQueryResponseRequest)(nil), "paychex.paychex.QueryAllQueryResponseRequest")
	proto.RegisterType((*QueryAllQueryResponseResponse)(nil), "paychex.paychex.QueryAllQueryResponseResponse")
	proto.RegisterType((*QueryCheckStaffRequest)(nil), "paychex.paychex.QueryCheckStaffRequest")
	proto.RegisterType((*QueryCheckStaffResponse)(nil), "paychex.paychex.QueryCheckStaffResponse")
}

func init() { proto.RegisterFile("paychex/paychex/query.proto", fileDescriptor_89bd21c5ead58169) }

var fileDescriptor_89bd21c5ead58169 = []byte{
	// 660 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x33, 0x69, 0x0d, 0x3a, 0xa5, 0x2a, 0x63, 0x31, 0xcd, 0x36, 0x6e, 0xda, 0x35, 0x24,
	0xa9, 0xd8, 0x1d, 0x52, 0xf1, 0xe4, 0x41, 0x52, 0xd1, 0x82, 0x78, 0xa8, 0xf1, 0x20, 0x78, 0x29,
	0x93, 0x64, 0xb2, 0x5d, 0xba, 0xc9, 0x6c, 0xb2, 0x5b, 0x31, 0x88, 0x17, 0x41, 0xbc, 0x0a, 0xde,
	0xc4, 0x83, 0x7f, 0x84, 0x7f, 0x44, 0x8f, 0x85, 0x5e, 0x3c, 0x89, 0x24, 0xfe, 0x21, 0xb2, 0xb3,
	0x6f, 0x9b, 0xee, 0xaf, 0xa6, 0x95, 0x9e, 0x36, 0xcc, 0x7c, 0xdf, 0x7b, 0x9f, 0xf7, 0xde, 0xbc,
	0x17, 0xbc, 0x62, 0xb3, 0x51, 0x7b, 0x8f, 0xbf, 0xa3, 0xc1, 0x77, 0x70, 0xc0, 0x87, 0x23, 0xdd,
	0x1e, 0x0a, 0x57, 0x90, 0x1b, 0x70, 0xa8, 0xc3, 0x57, 0x59, 0x32, 0x84, 0x21, 0xe4, 0x1d, 0xf5,
	0x7e, 0xf9, 0x32, 0xa5, 0x68, 0x08, 0x61, 0x58, 0x9c, 0x32, 0xdb, 0xa4, 0xac, 0xdf, 0x17, 0x2e,
	0x73, 0x4d, 0xd1, 0x77, 0xe0, 0xf6, 0x5e, 0x5b, 0x38, 0x3d, 0xe1, 0xd0, 0x16, 0x73, 0xb8, 0xef,
	0x9d, 0xbe, 0xad, 0xb7, 0xb8, 0xcb, 0xea, 0xd4, 0x66, 0x86, 0xd9, 0x97, 0xe2, 0xc0, 0x53, 0x94,
	0xc6, 0x66, 0x43, 0xd6, 0x0b, 0x3c, 0xa9, 0xd1, 0x5b, 0xde, 0xb3, 0x2d, 0x31, 0xe2, 0x1c, 0xee,
	0xcb, 0x89, 0xb9, 0xec, 0x0e, 0xb9, 0x63, 0x8b, 0xbe, 0x03, 0x2a, 0x6d, 0x09, 0x93, 0x97, 0xde,
	0xf9, 0x8e, 0x74, 0xdd, 0xe4, 0x83, 0x03, 0xee, 0xb8, 0xda, 0x0b, 0x7c, 0x2b, 0x74, 0xea, 0x9b,
	0x90, 0x87, 0x38, 0xe7, 0x23, 0x2c, 0xa3, 0x55, 0x54, 0x5b, 0xd8, 0xcc, 0xeb, 0x91, 0x92, 0xe8,
	0xbe, 0xc1, 0xd6, 0xfc, 0xe1, 0xef, 0x52, 0xa6, 0x09, 0x62, 0x6d, 0x1d, 0xe7, 0xa5, 0xb7, 0x6d,
	0xee, 0x3e, 0x05, 0x46, 0x08, 0x44, 0xae, 0xe3, 0xac, 0xd9, 0x91, 0xde, 0xe6, 0x9b, 0x59, 0xb3,
	0xa3, 0xbd, 0xc6, 0xcb, 0x71, 0x29, 0x44, 0x7f, 0x84, 0xaf, 0x06, 0x67, 0x10, 0xbf, 0x10, 0x8b,
	0x1f, 0x08, 0x80, 0xe0, 0xc4, 0x40, 0x63, 0xc0, 0xd0, 0xb0, 0xac, 0x28, 0xc3, 0x33, 0x8c, 0xa7,
	0xa5, 0x07, 0xcf, 0x15, 0xdd, 0xef, 0x93, 0xee, 0xf5, 0x49, 0xf7, 0x5f, 0x01, 0xf4, 0x49, 0xdf,
	0x61, 0x46, 0x60, 0xdb, 0x3c, 0x65, 0xa9, 0xfd, 0x40, 0x00, 0x1f, 0x8a, 0x91, 0x08, 0x3f, 0x77,
	0x21, 0x78, 0xb2, 0x1d, 0x22, 0xcc, 0x4a, 0xc2, 0xea, 0x4c, 0x42, 0x3f, 0x72, 0x08, 0x51, 0xc7,
	0xc5, 0xa0, 0xbc, 0xf2, 0x7b, 0x22, 0x4a, 0x69, 0xc7, 0x3e, 0xbe, 0x93, 0xa2, 0x87, 0xb4, 0x9e,
	0xe3, 0xc5, 0xd0, 0x05, 0x94, 0x4f, 0x8d, 0xe5, 0x16, 0x52, 0x41, 0x82, 0x61, 0x53, 0xad, 0x0b,
	0x70, 0x0d, 0xcb, 0x4a, 0x84, 0xbb, 0xac, 0x3e, 0xfd, 0x44, 0x90, 0x55, 0x3c, 0x50, 0x7a, 0x56,
	0x73, 0xff, 0x99, 0xd5, 0xe5, 0xf5, 0x6e, 0x19, 0xdf, 0x96, 0x9e, 0x9f, 0xec, 0xf1, 0xf6, 0xfe,
	0x2b, 0x97, 0x75, 0xbb, 0xc1, 0xb4, 0x3e, 0x86, 0xb7, 0x7d, 0xfa, 0x06, 0xa2, 0x97, 0xf1, 0xe2,
	0x20, 0xd6, 0x9f, 0x6b, 0xcd, 0xf0, 0xe1, 0xe6, 0x71, 0x0e, 0x5f, 0x91, 0x1e, 0x88, 0x8b, 0x73,
	0xfe, 0x08, 0x93, 0xbb, 0xc9, 0xc9, 0x86, 0xf6, 0x84, 0x52, 0x3e, 0x5b, 0x04, 0x8d, 0x2d, 0x7d,
	0x3c, 0xfe, 0xfb, 0x35, 0x5b, 0x20, 0x79, 0x9a, 0xbc, 0xd0, 0xc8, 0x67, 0x34, 0x9d, 0x0e, 0x52,
	0x4b, 0xf6, 0x19, 0x5f, 0x1e, 0xca, 0xfa, 0x39, 0x94, 0x80, 0x50, 0x91, 0x08, 0xab, 0x44, 0xa5,
	0x69, 0x5b, 0x93, 0xbe, 0x37, 0x3b, 0x1f, 0xc8, 0x27, 0x84, 0x17, 0x02, 0xe3, 0x86, 0x65, 0xa5,
	0xc1, 0xc4, 0xb7, 0x48, 0x1a, 0x4c, 0xc2, 0x2e, 0xd0, 0xd6, 0x24, 0xcc, 0x0a, 0x29, 0xa4, 0xc2,
	0x90, 0xef, 0x28, 0xf2, 0x04, 0xc9, 0x46, 0x6a, 0xb2, 0x49, 0xc3, 0xa2, 0xe8, 0xe7, 0x95, 0x03,
	0xd3, 0x7d, 0xc9, 0x54, 0x21, 0x65, 0x7a, 0xf6, 0xdf, 0x86, 0x5f, 0xa6, 0x6f, 0x08, 0xdf, 0x0c,
	0xf9, 0xf1, 0x6a, 0xb5, 0x91, 0x5a, 0x81, 0x8b, 0x10, 0xa6, 0x0d, 0xa5, 0x56, 0x95, 0x84, 0x6b,
	0xa4, 0x34, 0x83, 0xd0, 0xeb, 0x21, 0x9e, 0x8e, 0x02, 0xa9, 0x26, 0xc7, 0x89, 0x8d, 0x91, 0x52,
	0x9b, 0x2d, 0x04, 0x94, 0xb2, 0x44, 0x51, 0x49, 0x31, 0x86, 0xd2, 0xf6, 0xc4, 0xbb, 0x8e, 0xa7,
	0xde, 0xaa, 0x1f, 0x8e, 0x55, 0x74, 0x34, 0x56, 0xd1, 0x9f, 0xb1, 0x8a, 0xbe, 0x4c, 0xd4, 0xcc,
	0xd1, 0x44, 0xcd, 0xfc, 0x9a, 0xa8, 0x99, 0x37, 0xf9, 0x40, 0x3e, 0x35, 0x74, 0x47, 0x36, 0x77,
	0x5a, 0x39, 0xf9, 0xa7, 0xfc, 0xe0, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x0e, 0xbc, 0x8d,
	0x88, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Employee items.
	Employee(ctx context.Context, in *QueryGetEmployeeRequest, opts ...grpc.CallOption) (*QueryGetEmployeeResponse, error)
	EmployeeAll(ctx context.Context, in *QueryAllEmployeeRequest, opts ...grpc.CallOption) (*QueryAllEmployeeResponse, error)
	// Queries a list of QueryResponse items.
	QueryResponse(ctx context.Context, in *QueryGetQueryResponseRequest, opts ...grpc.CallOption) (*QueryGetQueryResponseResponse, error)
	QueryResponseAll(ctx context.Context, in *QueryAllQueryResponseRequest, opts ...grpc.CallOption) (*QueryAllQueryResponseResponse, error)
	// Queries a list of CheckStaff items.
	CheckStaff(ctx context.Context, in *QueryCheckStaffRequest, opts ...grpc.CallOption) (*QueryCheckStaffResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/paychex.paychex.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Employee(ctx context.Context, in *QueryGetEmployeeRequest, opts ...grpc.CallOption) (*QueryGetEmployeeResponse, error) {
	out := new(QueryGetEmployeeResponse)
	err := c.cc.Invoke(ctx, "/paychex.paychex.Query/Employee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EmployeeAll(ctx context.Context, in *QueryAllEmployeeRequest, opts ...grpc.CallOption) (*QueryAllEmployeeResponse, error) {
	out := new(QueryAllEmployeeResponse)
	err := c.cc.Invoke(ctx, "/paychex.paychex.Query/EmployeeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryResponse(ctx context.Context, in *QueryGetQueryResponseRequest, opts ...grpc.CallOption) (*QueryGetQueryResponseResponse, error) {
	out := new(QueryGetQueryResponseResponse)
	err := c.cc.Invoke(ctx, "/paychex.paychex.Query/QueryResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryResponseAll(ctx context.Context, in *QueryAllQueryResponseRequest, opts ...grpc.CallOption) (*QueryAllQueryResponseResponse, error) {
	out := new(QueryAllQueryResponseResponse)
	err := c.cc.Invoke(ctx, "/paychex.paychex.Query/QueryResponseAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckStaff(ctx context.Context, in *QueryCheckStaffRequest, opts ...grpc.CallOption) (*QueryCheckStaffResponse, error) {
	out := new(QueryCheckStaffResponse)
	err := c.cc.Invoke(ctx, "/paychex.paychex.Query/CheckStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Employee items.
	Employee(context.Context, *QueryGetEmployeeRequest) (*QueryGetEmployeeResponse, error)
	EmployeeAll(context.Context, *QueryAllEmployeeRequest) (*QueryAllEmployeeResponse, error)
	// Queries a list of QueryResponse items.
	QueryResponse(context.Context, *QueryGetQueryResponseRequest) (*QueryGetQueryResponseResponse, error)
	QueryResponseAll(context.Context, *QueryAllQueryResponseRequest) (*QueryAllQueryResponseResponse, error)
	// Queries a list of CheckStaff items.
	CheckStaff(context.Context, *QueryCheckStaffRequest) (*QueryCheckStaffResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Employee(ctx context.Context, req *QueryGetEmployeeRequest) (*QueryGetEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Employee not implemented")
}
func (*UnimplementedQueryServer) EmployeeAll(ctx context.Context, req *QueryAllEmployeeRequest) (*QueryAllEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmployeeAll not implemented")
}
func (*UnimplementedQueryServer) QueryResponse(ctx context.Context, req *QueryGetQueryResponseRequest) (*QueryGetQueryResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryResponse not implemented")
}
func (*UnimplementedQueryServer) QueryResponseAll(ctx context.Context, req *QueryAllQueryResponseRequest) (*QueryAllQueryResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryResponseAll not implemented")
}
func (*UnimplementedQueryServer) CheckStaff(ctx context.Context, req *QueryCheckStaffRequest) (*QueryCheckStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStaff not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paychex.paychex.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Employee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Employee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paychex.paychex.Query/Employee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Employee(ctx, req.(*QueryGetEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EmployeeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EmployeeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paychex.paychex.Query/EmployeeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EmployeeAll(ctx, req.(*QueryAllEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetQueryResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paychex.paychex.Query/QueryResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryResponse(ctx, req.(*QueryGetQueryResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryResponseAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllQueryResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryResponseAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paychex.paychex.Query/QueryResponseAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryResponseAll(ctx, req.(*QueryAllQueryResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paychex.paychex.Query/CheckStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckStaff(ctx, req.(*QueryCheckStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paychex.paychex.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Employee",
			Handler:    _Query_Employee_Handler,
		},
		{
			MethodName: "EmployeeAll",
			Handler:    _Query_EmployeeAll_Handler,
		},
		{
			MethodName: "QueryResponse",
			Handler:    _Query_QueryResponse_Handler,
		},
		{
			MethodName: "QueryResponseAll",
			Handler:    _Query_QueryResponseAll_Handler,
		},
		{
			MethodName: "CheckStaff",
			Handler:    _Query_CheckStaff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paychex/paychex/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetEmployeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEmployeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEmployeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEmployeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEmployeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEmployeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Employee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEmployeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEmployeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEmployeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEmployeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEmployeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEmployeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Employee) > 0 {
		for iNdEx := len(m.Employee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Employee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetQueryResponseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetQueryResponseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetQueryResponseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetQueryResponseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetQueryResponseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetQueryResponseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.QueryResponse.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllQueryResponseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllQueryResponseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllQueryResponseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllQueryResponseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllQueryResponseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllQueryResponseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.QueryResponse) > 0 {
		for iNdEx := len(m.QueryResponse) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueryResponse[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckStaffRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckStaffRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckStaffRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCheckStaffResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckStaffResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckStaffResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryResponse) > 0 {
		i -= len(m.QueryResponse)
		copy(dAtA[i:], m.QueryResponse)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryResponse)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetEmployeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetEmployeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Employee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEmployeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEmployeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Employee) > 0 {
		for _, e := range m.Employee {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetQueryResponseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetQueryResponseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.QueryResponse.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllQueryResponseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllQueryResponseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QueryResponse) > 0 {
		for _, e := range m.QueryResponse {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckStaffRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCheckStaffResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryResponse)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEmployeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEmployeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEmployeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEmployeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEmployeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEmployeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Employee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Employee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEmployeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEmployeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEmployeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEmployeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEmployeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEmployeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Employee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Employee = append(m.Employee, Employee{})
			if err := m.Employee[len(m.Employee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetQueryResponseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetQueryResponseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetQueryResponseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetQueryResponseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetQueryResponseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetQueryResponseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QueryResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllQueryResponseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllQueryResponseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllQueryResponseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllQueryResponseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllQueryResponseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllQueryResponseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryResponse = append(m.QueryResponse, QueryResponse{})
			if err := m.QueryResponse[len(m.QueryResponse)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckStaffRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckStaffRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckStaffRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckStaffResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckStaffResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckStaffResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
