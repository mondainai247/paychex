// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: paychex/paychex/staff.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Staff struct {
	RoleName      string `protobuf:"bytes,1,opt,name=roleName,proto3" json:"roleName,omitempty"`
	EmployeeCount uint64 `protobuf:"varint,2,opt,name=employeeCount,proto3" json:"employeeCount,omitempty"`
}

func (m *Staff) Reset()         { *m = Staff{} }
func (m *Staff) String() string { return proto.CompactTextString(m) }
func (*Staff) ProtoMessage()    {}
func (*Staff) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e66cb01deee7620, []int{0}
}
func (m *Staff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Staff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Staff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Staff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staff.Merge(m, src)
}
func (m *Staff) XXX_Size() int {
	return m.Size()
}
func (m *Staff) XXX_DiscardUnknown() {
	xxx_messageInfo_Staff.DiscardUnknown(m)
}

var xxx_messageInfo_Staff proto.InternalMessageInfo

func (m *Staff) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *Staff) GetEmployeeCount() uint64 {
	if m != nil {
		return m.EmployeeCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Staff)(nil), "paychex.paychex.Staff")
}

func init() { proto.RegisterFile("paychex/paychex/staff.proto", fileDescriptor_1e66cb01deee7620) }

var fileDescriptor_1e66cb01deee7620 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x48, 0xac, 0x4c,
	0xce, 0x48, 0xad, 0xd0, 0x87, 0xd1, 0xc5, 0x25, 0x89, 0x69, 0x69, 0x7a, 0x05, 0x45, 0xf9, 0x25,
	0xf9, 0x42, 0xfc, 0x50, 0x41, 0x3d, 0x28, 0xad, 0xe4, 0xc9, 0xc5, 0x1a, 0x0c, 0x92, 0x17, 0x92,
	0xe2, 0xe2, 0x28, 0xca, 0xcf, 0x49, 0xf5, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x82, 0xf3, 0x85, 0x54, 0xb8, 0x78, 0x53, 0x73, 0x0b, 0x72, 0xf2, 0x2b, 0x53, 0x53, 0x9d,
	0xf3, 0x4b, 0xf3, 0x4a, 0x24, 0x98, 0x14, 0x18, 0x35, 0x58, 0x82, 0x50, 0x05, 0x9d, 0x0c, 0x4f,
	0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18,
	0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x1c, 0xe6, 0x14, 0x84, 0xa3, 0x4a,
	0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0xae, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x94,
	0xbf, 0x3f, 0xf8, 0xb4, 0x00, 0x00, 0x00,
}

func (m *Staff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Staff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Staff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EmployeeCount != 0 {
		i = encodeVarintStaff(dAtA, i, uint64(m.EmployeeCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleName) > 0 {
		i -= len(m.RoleName)
		copy(dAtA[i:], m.RoleName)
		i = encodeVarintStaff(dAtA, i, uint64(len(m.RoleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStaff(dAtA []byte, offset int, v uint64) int {
	offset -= sovStaff(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Staff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleName)
	if l > 0 {
		n += 1 + l + sovStaff(uint64(l))
	}
	if m.EmployeeCount != 0 {
		n += 1 + sovStaff(uint64(m.EmployeeCount))
	}
	return n
}

func sovStaff(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStaff(x uint64) (n int) {
	return sovStaff(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Staff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeCount", wireType)
			}
			m.EmployeeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmployeeCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStaff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStaff(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStaff
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStaff
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStaff
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStaff
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStaff        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStaff          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStaff = fmt.Errorf("proto: unexpected end of group")
)
